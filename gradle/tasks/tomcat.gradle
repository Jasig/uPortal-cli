repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    tomcat
    shared
}

dependencies {
    tomcat "org.apache.tomcat:tomcat:${tomcatVersion}@tar.gz"
    shared "javax.ccpp:ccpp:${ccppVersion}"
    shared "org.apache.portals.pluto:pluto-container-api:${plutoVersion}"
    shared "org.apache.portals.pluto:pluto-container-driver-api:${plutoVersion}"
    shared "org.apache.portals.pluto:pluto-taglib:${plutoVersion}"
    shared "org.apereo.service.persondir:person-directory-api:${personDirectoryVersion}"
    shared "org.jasig.portal:uPortal-api-platform:${uPortalVersion}"
    shared "${portletApiDependency}"
}

task tomcatInstall() {
    group 'Tomcat'
    description 'Downloads the Apache Tomcat servlet container and performs the necessary configuration steps'
    dependsOn project.tasks.portalProperties

    doLast {
        String serverHome = rootProject.ext['buildProperties'].getProperty('server.home')

        logger.lifecycle("Installing Tomcat servlet container version ${tomcatVersion} to location ${serverHome}")

        File tomcatTmpDir = new File('build/tmp/tomcat')

        // Clear & reset the tomcat directory
        tomcatTmpDir.deleteDir()
        tomcatTmpDir.mkdirs()

        File tomcatTarFile = new File("${tomcatTmpDir}/tomcat-gunziped.tar")

        // Gunzip the Tomcat binaries
        File tomcatTarGz = configurations.tomcat.files.iterator().next()
        ant.gunzip(src: tomcatTarGz, dest: tomcatTarFile.getPath())

        // Un-archive the tar file
        copy {
            from tarTree(tomcatTarFile.getPath())
            into tomcatTmpDir
        }

        // Clear any previous copy of Tomcat
        file(serverHome).deleteDir()

        // Copy to the final location
        copy {
            from "${tomcatTmpDir}/apache-tomcat-${tomcatVersion}"
            into serverHome
        }

        //  Configure our settings by overlaying etc/tomcat
        copy {
            from 'etc/tomcat'
            into serverHome
        }

        // Add shared.loader dependencies
        copy {
            from configurations.shared
            into "${serverHome}/shared/lib"
        }

        /*
         * Create & initialize the folder that is the default location of {portal.home].  (If
         * another location has been specified, we don't want to mess with that.)
         */
        String portalHomeDir = "${serverHome}/portal"
        file(portalHomeDir).mkdirs()
        copy {
            from 'etc/portal'
            into portalHomeDir
        }
    }
}

task tomcatStart() {
    group 'Tomcat'
    description 'Start the embedded Tomcat servlet container'
    dependsOn project.tasks.portalProperties

    doLast {
        String serverHome = rootProject.ext['buildProperties'].getProperty('server.home')
        logger.lifecycle("Starting Tomcat servlet container in ${serverHome}")
        String executable = isWindows ? 'cmd' : './startup.sh'
        ant.exec(dir: "${serverHome}/bin", executable: executable, spawn: true) {
            if (isWindows) {
                arg(value: '/c')
                arg(value: 'startup.bat')
            }
        }
    }
}

task tomcatStop() {
    group 'Tomcat'
    description 'Stop the embedded Tomcat servlet container'
    dependsOn project.tasks.portalProperties

    doLast {
        String serverHome = rootProject.ext['buildProperties'].getProperty('server.home')
        logger.lifecycle("Stopping Tomcat servlet container in ${serverHome}")
        String executable = isWindows ? 'cmd' : './shutdown.sh'
        ant.exec(dir: "${serverHome}/bin", executable: executable, spawn: true) {
            if (isWindows) {
                arg(value: '/c')
                arg(value: 'shutdown.bat')
            }
        }
    }
}

task tomcatClearLogs(type: Delete) {
    group 'Tomcat'
    description 'Delete all log files within Tomcat'
    dependsOn project.tasks.portalProperties

    doFirst {
        String serverBase = rootProject.ext['buildProperties'].getProperty('server.base')
        FileTree logsFolder = fileTree("${serverBase}/logs")
        if (logsFolder.isEmpty()) {
            logger.lifecycle('The Tomcat logs directory is empty;  there is noting to delete')
        } else {
            logsFolder.visit { FileVisitDetails details ->
                logger.lifecycle("Deleting ${details.name}")
                delete details.file
            }
        }
    }
}

task tomcatZip {
    group 'Tomcat'
    description 'Create a zip file of Tomcat (base) with uPortal and portlets'
    dependsOn tomcatInstall
    dependsOn allprojects.collect { it.tasks.matching { it.name.equals('tomcatDeploy') } }

    doLast {
        String serverBase = rootProject.ext.buildProperties.getProperty('server.base')
        ant.zip(destfile: 'tomcat-uportal.zip') {
            zipfileset (
                dir: "${serverBase}",
                prefix: 'tomcat',
                excludes: 'logs/**/*, temp/**/*, work/**/*'
            )
        }
    }
}

task tomcatTar {
    group 'Tomcat'
    description 'Create a .tar.gz file of Tomcat (base) with uPortal and portlets'
    dependsOn tomcatInstall
    dependsOn allprojects.collect { it.tasks.matching { it.name.equals('tomcatDeploy') } }

    doLast {
        String serverBase = rootProject.ext.buildProperties.getProperty('server.base')
        ant.tar(destfile: 'tomcat-uportal.tgz', compression: 'gzip', longfile: 'gnu') {
            tarfileset (
                dir: "${serverBase}",
                prefix: 'tomcat',
                excludes: 'logs/**/*, temp/**/*, work/**/*'
            )
        }
    }
}
